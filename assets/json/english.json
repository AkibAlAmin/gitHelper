{
  "data": [
    {
      "title": "$ What is Git?",
      "items": [
        {
          "gitQus": "* What is Git?",
          "gitAns": "Git is a free and distributed version-control system for tracking changes in source code during software development. <br>It is designed for coordinating work among programmers, but it can be used to track changes in any set of files. <br>Its goals include speed, data integrity, and support for distributed, non-linear workflows."
        },
        {
          "gitQus": "* What is the purpose of Git?",
          "gitAns": "Git (/ɡɪt/) is a version control system for tracking changes in computer files and coordinating work on those files among <br> multiple people. It is primarily used for source code management in software development, but it can be used to <br>keep track of changes in any set of files."
        },
        {
          "gitQus": "* What is git vs GitHub?",
          "gitAns": "The key difference between Git and GitHub is that Git is an open-source tool developers install locally to manage <br>source code, while GitHub is an online service to which developers who use Git can connect and <br>upload or download resources."
        }
      ]
    },
    {
      "title": "$ Download Git",
      "items": [
        {
          "gitQus": "- Windows :",
          "gitAns": "<a href='https://git-scm.com/download/win' target='_blank'>[Download]</a> and Install program then run the git bash icon."
        },
        {
          "gitQus": "- Mac :",
          "gitAns": "ruby -e '$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)'"
        },
        {
          "gitQus": "",
          "gitAns": "brew doctor"
        },
        {
          "gitQus": "",
          "gitAns": "brew install git"
        },
        {
          "gitQus": "- Linux :",
          "gitAns": "sudo apt-get update"
        },
        {
          "gitQus": "",
          "gitAns": "sudo apt-get upgrade"
        },
        {
          "gitQus": "",
          "gitAns": "sudo apt-get install git"
        }
      ]
    },
    {
      "title": "$ Initialization and initial commit",
      "items": [
        {
          "gitQus": "Go to HOME path (~)",
          "gitAns": "cd ~"
        },
        {
          "gitQus": "Create git-training folder",
          "gitAns": "mkdir git-training"
        },
        {
          "gitQus": "Move the path (check the current path with the pwd command)",
          "gitAns": "cd git-training"
        },
        {
          "gitQus": "Initialize the folder git (see the .git folder created with the ls -A command)",
          "gitAns": "git init"
        },
        {
          "gitQus": "Add PDF file (add to commit list add) (use file in commit1 folder)",
          "gitAns": "git add report_card.pdf"
        },
        {
          "gitQus": "Making the first commit (creating a unit of history)",
          "gitAns": "git commit -m 'report card: Add question PDF'"
        },
        {
          "gitQus": "Add source code (add to commit list add) (use files in commit2 folder)",
          "gitAns": "git add report_card.c"
        },
        {
          "gitQus": "commit (make history unit)",
          "gitAns": "git commit -m 'report card: Add base code'"
        } 
      ]
    },
    {
      "title": "$ Using diff and making additional commit",
      "items": [
        {
          "gitQus": "Check the status",
          "gitAns": "git status"
        },
        {
          "gitQus": "Change or overwrite the contents of the report_card.c source file in the commit3 folder and check",
          "gitAns": "git diff"
        },
        {
          "gitQus": "If you confirm the change through diff, proceed to add command",
          "gitAns": "git add report_card.c"
        },
        {
          "gitQus": "Commit the prepared source file",
          "gitAns": "git commit -m 'report card: Print a message of introduction'"
        },
        {
          "gitQus": "Check three commit so far",
          "gitAns": "git log"
        },
        {
          "gitQus": "Change or overwrite the contents of the report_card.c source file in the commit4 folder and check",
          "gitAns": "git diff"
        },
        {
          "gitQus": "If you confirm the change through diff, proceed to add command",
          "gitAns": "git add report_card.c"
        },
        {
          "gitQus": "Commit the prepared source file",
          "gitAns": "git commit -m 'report card: Print grades of each subject'"
        },
        {
          "gitQus": "Check four commit so far",
          "gitAns": "git log"
        }
      ]
    },
    {
      "title": "$ Include your signature in commit",
      "items": [
        {
          "gitQus": "Change or overwrite the contents of the report_card.c source file in the commit5 folder and check",
          "gitAns": "git diff"
        },
        {
          "gitQus": "If you confirm the change through diff, proceed to add command",
          "gitAns": "git add report_card.c"
        },
        {
          "gitQus": "Commit with signature (Include signatures with the -s option.)",
          "gitAns": "git commit -sm 'report card: Show the sum of each grade'"
        },
        {
          "gitQus": "Change or overwrite the contents of the report_card.c source file in the commit6 folder and check",
          "gitAns": "git diff"
        },
        {
          "gitQus": "If you confirm the change through diff, proceed to add command",
          "gitAns": "git add report_card.c"
        },
        {
          "gitQus": "Commit with signature",
          "gitAns": "git commit -sm 'report card: Get a average of grades'"
        }
      ]
    },
    {
      "title": "$ Let's push commit so far",
      "items": [
        {
          "gitQus": "Check the status and check the current branch name master",
          "gitAns": "git status"
        },
        {
          "gitQus": "Check the commit so far (if not six, check again)",
          "gitAns": "git shortlog"
        },
        {
          "gitQus": "Register GitHub remote repository URL(Pause and turn on http://github.com and create a new repository) Register GitHub remote repository with the copied URL (except for '<' and '>')",
          "gitAns": "git remote add origin"
        },
        {
          "gitQus": "Now let's push the work to the GitHub remote repository (origin).",
          "gitAns": "git push origin master"
        }
      ]
    },
    {
      "title": "$ Cancel add",
      "items": [
        {
          "gitQus": "Create and add an empty file with touch (it is possible to execute commands consecutively with ';')",
          "gitAns": "touch test;"
        },
        {
          "gitQus": "",
          "gitAns": "git add test"
        },
        {
          "gitQus": "Check your current status",
          "gitAns": "git status"
        },
        {
          "gitQus": "Let's cancel the add command with reset command",
          "gitAns": "git reset"
        },
        {
          "gitQus": "Check your current status again",
          "gitAns": "git status"
        }
      ]
    },
    {
      "title": "$ Clearing the commit",
      "items": [
        {
          "gitQus": "Make sure the test file still exists (re-create it if you deleted it)",
          "gitAns": "git status"
        },
        {
          "gitQus": "Make some wrong commit. (Can execute commands consecutively)",
          "gitAns": "git add test"
        },
        {
          "gitQus": "",
          "gitAns": "git commit -sm'test'"
        },
        {
          "gitQus": "Then push and apply the wrong commit to the tree in GitHub.",
          "gitAns": "git push origin master"
        },
        {
          "gitQus": "And clears the most recent commit.",
          "gitAns": "git reset HEAD~1"
        },
        {
          "gitQus": "Force push to the remote repository tree to clear the wrong commit",
          "gitAns": "git push origin master --force"
        },
        {
          "gitQus": "Commit is canceled and the files are staged and saved in working directory",
          "gitAns": "git reset --soft HEAD^"
        },
        {
          "gitQus": "Commit is canceled and the files are unstagedand saved in the working directory.",
          "gitAns": "git reset --mixed HEAD^"
        },
        {
          "gitQus": "",
          "gitAns": "git reset HEAD^"
        },
        {
          "gitQus": "",
          "gitAns": "git reset HEAD~2"
        },
        {
          "gitQus": "Commit is canceled and the files are unstagedand deleted from the working directory",
          "gitAns": "git reset --hard HEAD^"
        }
      ]
    },
    {
      "title": "$ Clearing the commit (Advanced)",
      "items": [
        {
          "gitQus": "Return to commit in the working directory-Cancels the most recent commit and returns the working directory",
          "gitAns": "git reset HEAD^"
        },
        {
          "gitQus": "Reflog(the branch and commit that HEAD has pointed to in the last few months)",
          "gitAns": "git reflog"
        },
        {
          "gitQus": "Return the working directory to the desired point in time",
          "gitAns": "git log –g"
        },
        {
          "gitQus": "",
          "gitAns": "git reset"
        },
        {
          "gitQus": "Commit again with reverted",
          "gitAns": "git commit -m 'Write commit messages'"
        },
        {
          "gitQus": "Force push to remote storage",
          "gitAns": "git push origin branch_name–f"
        },
        {
          "gitQus": "",
          "gitAns": "git push origin + branch_name"
        },
        {
          "gitQus": "",
          "gitAns": "git push origin +master"
        }
      ]
    },
    {
      "title": "$ Revert",
      "items": [
        {
          "gitQus": "Revert single commit",
          "gitAns": "git revert commit_idex"
        },
        {
          "gitQus": "",
          "gitAns": "git revert 2664ce8"
        },
        {
          "gitQus": "If you need to commit multiple commits at onc",
          "gitAns": "git revert start_commit_id...end_commit_id"
        }
      ]
    },
    {
      "title": "$ Pull Request",
      "items": [
        {
          "gitQus": "Go to https://github.com/jinnatul/git-helper",
          "gitAns": "Click Fork Button"
        },
        {
          "gitQus": "Downloading Forked Project ",
          "gitAns": "git clone project_url_forked_in_your_account"
        },
        {
          "gitQus": "Move Clone Project Directory ",
          "gitAns": "cd clone_project_directory_name"
        },
        {
          "gitQus": "Create branch (develop) for pull-request",
          "gitAns": "git checkout -b develop"
        },
        {
          "gitQus": "Move pull_request_testdirectory",
          "gitAns": "cd pull_request_test"
        },
        {
          "gitQus": "Create a directory with your name",
          "gitAns": "mkdir your_name"
        },
        {
          "gitQus": "Create a new file in Directory",
          "gitAns": "touch any_name.txt"
        },
        {
          "gitQus": "Go to Parent Directory",
          "gitAns": "cd .."
        },
        {
          "gitQus": "Add the working directory",
          "gitAns": "git add your_name"
        },
        {
          "gitQus": "Prepared files commit",
          "gitAns": "git commit –m 'your_namepull request test'"
        },
        {
          "gitQus": "Push to the develop branch of the forked repository (note: not master)",
          "gitAns": "git push origin develop"
        }
      ]
    },
    {
      "title": "$ Merge",
      "items": [
        {
          "gitQus": "Make sure that your just-in-progress develop branch is the current branch (also visible as status)",
          "gitAns": "git branch"
        },
        {
          "gitQus": "Let's create an additional branch",
          "gitAns": "git checkout -b test"
        },
        {
          "gitQus": "Create an empty file with touch and make a commit",
          "gitAns": "touch test"
        },
        {
          "gitQus": "",
          "gitAns": "git add test"
        },
        {
          "gitQus": "",
          "gitAns": "git commit -m 'test'"
        },
        {
          "gitQus": "Merge additional branches (test) based on the current branch (develop).",
          "gitAns": "git checkout develop"
        },
        {
          "gitQus": "",
          "gitAns": "git status"
        },
        {
          "gitQus": "",
          "gitAns": "git merge test"
        }
      ]
    },
    {
      "title": "$ Rebase",
      "items": [
        {
          "gitQus": "On Stage 8, go to the project path that was cloned after the fork and add upstream(This is not your project URL)",
          "gitAns": "git remote add upstream https://github.com/jinnatul/git-helper.git"
        },
        {
          "gitQus": "get upstream'sdevelop branch.",
          "gitAns": "git fetch upstream develop"
        },
        {
          "gitQus": "Make sure your current branch is develop",
          "gitAns": "git status"
        },
        {
          "gitQus": "Rebase",
          "gitAns": "git rebase upstream/develop"
        }
      ]
    },
    {
      "title": "$ Rebase--interactive",
      "items": [
        {
          "gitQus": "Select the commit to modify",
          "gitAns": "git rebase -i--root"
        },
        {
          "gitQus": "Check status and check if rebase is normal",
          "gitAns": "git status"
        },
        {
          "gitQus": "Modify the commit information and finish with --continue",
          "gitAns": "git commit --amend"
        },
        {
          "gitQus": "",
          "gitAns": "git rebase --continue"
        }
      ]
    },
    {
      "title": "$ Blame",
      "items": [
        {
          "gitQus": "Identify which file, who modified which line.",
          "gitAns": "git blame report_card.c"
        },
        {
          "gitQus": "Check commit information at the time using commit ID",
          "gitAns": "git show <commit ID>"
        }
      ]
    },
    {
      "title": "$ Clean",
      "items": [
        {
          "gitQus": "Only delete files except directories",
          "gitAns": "git clean -f"
        },
        {
          "gitQus": "Delete directory inclusion",
          "gitAns": "git clean -f -d"
        },
        {
          "gitQus": "Delete even ignored files",
          "gitAns": "git clean -f -d -x"
        }
      ]
    },
    {
      "title": "$ Gitignore",
      "items": [
        {
          "gitQus": "Make .gitignore",
          "gitAns": "touch .gitignore"
        },
        {
          "gitQus": "Delete all caches in the current repository.",
          "gitAns": "git rm -r --cached"
        },
        {
          "gitQus": "Delete the file corresponding to file_namefrom the remote repository.(Do not delete files in the local repository)",
          "gitAns": "git rm -r --cached file_name"
        },
        {
          "gitQus": "Set to track all other files again, except for the list of files put in .gitignore.",
          "gitAns": "git add ."
        },
        {
          "gitQus": "",
          "gitAns": "git commit -m 'Fixed untracked files'"
        }
      ]
    },
    {
      "title": "$ Feature Branch creation & termination",
      "items": [
        {
          "gitQus": "Branch the feature branch (feature/login) on the 'develop' branch. (not in the 'master' branch!)",
          "gitAns": "git checkout -b feature/login develop"
        },
        {
          "gitQus": "Move to the 'develop' branch",
          "gitAns": "git checkout develop"
        },
        {
          "gitQus": "Merge the contents of the feature/login branch into the 'develop' branch",
          "gitAns": "git merge --no-ff feature/login"
        },
        {
          "gitQus": "Delete the branch corresponding to feature/login",
          "gitAns": "git branch -d feature/login"
        },
        {
          "gitQus": "Put the 'develop' branch on the remote repository",
          "gitAns": "git push origin develop"
        }
      ]
    },
    {
      "title": "$ Release Branch creation & termination",
      "items": [
        {
          "gitQus": "branch from the release branch (release-1.2) to the 'develop' branch (not from the 'master' branch)",
          "gitAns": "git checkout -b release-1.2 develop"
        },
        {
          "gitQus": "Move to the 'master' branch.",
          "gitAns": "git checkout master"
        },
        {
          "gitQus": "Merge the contents of the release-1.2 branch into the 'master' branch.",
          "gitAns": "git merge --no-ff release-1.2"
        },
        {
          "gitQus": "Give the release version tag to the merged commit.",
          "gitAns": "git tag -a 1.2"
        },
        {
          "gitQus": "Go to the 'develop' branch.",
          "gitAns": "git checkout develop"
        },
        {
          "gitQus": "Merge the contents of the release-1.2 branch into the 'develop' branch.",
          "gitAns": "git merge --no-ff release-1.2"
        },
        {
          "gitQus": "-d option: Delete the branch corresponding to release-1.2",
          "gitAns": "git branch -d release-1.2"
        }
      ]
    },
    {
      "title": "$ What is Feature Branch Workflow?",
      "items": [
        {
          "gitQus": "",
          "gitAns": ""
        }
      ]
    },
    {
      "title": "$ Concept of Local Storage & Remote Storage",
      "items": [
        {
          "gitQus": "",
          "gitAns": ""
        }
      ]
    },
    {
      "title": "$ Create a local repository with git clone",
      "items": [
        {
          "gitQus": "",
          "gitAns": ""
        }
      ]
    },
    {
      "title": "$ Check branch location",
      "items": [
        {
          "gitQus": "",
          "gitAns": ""
        }
      ]
    },
    {
      "title": "$ Create a new branch",
      "items": [
        {
          "gitQus": "",
          "gitAns": ""
        }
      ]
    },
    {
      "title": "$ Push the branch to the central remote repository",
      "items": [
        {
          "gitQus": "",
          "gitAns": ""
        }
      ]
    },
    {
      "title": "$ Send a full request to the project manager",
      "items": [
        {
          "gitQus": "",
          "gitAns": ""
        }
      ]
    },
    {
      "title": "$ Synchronization",
      "items": [
        {
          "gitQus": "",
          "gitAns": ""
        }
      ]
    },
    {
      "title": "$ Create another branch for the new function",
      "items": [
        {
          "gitQus": "",
          "gitAns": ""
        }
      ]
    },
    {
      "title": "$ Fork the central remote repository",
      "items": [
        {
          "gitQus": "",
          "gitAns": ""
        }
      ]
    },
    {
      "title": "$ Create a local repository with the git clone command",
      "items": [
        {
          "gitQus": "",
          "gitAns": ""
        }
      ]
    },
    {
      "title": "$ Connect two remote repositories",
      "items": [
        {
          "gitQus": "",
          "gitAns": ""
        }
      ]
    },
    {
      "title": "$ Check branch location",
      "items": [
        {
          "gitQus": "",
          "gitAns": ""
        }
      ]
    },
    {
      "title": "$ Create a new branch for functional development",
      "items": [
        {
          "gitQus": "",
          "gitAns": ""
        }
      ]
    },
    {
      "title": "$ Push the commit history to your remote repository",
      "items": [
        {
          "gitQus": "",
          "gitAns": ""
        }
      ]
    }
  ]
}